generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Portfolio {
  code            String           @id @db.VarChar(32)
  name            String           @db.VarChar(128)
  currencies      Currency[]       @relation("currencyToportfolio")
  portfolioGroups  PortfolioGroup[] @relation("portfolioToportfolio_group")
  trades          Trade[]          @relation("portfolioTotrade")

  @@map("portfolio")
}

model Security {
  code                String               @id @db.VarChar(16)
  shortName           String               @map("short_name") @db.VarChar(16)
  fullName            String               @map("full_name") @db.VarChar(128)
  boardId             String               @map("board_id") @db.VarChar(32)
  market              String               @db.VarChar(32)
  engine              String               @db.VarChar(32)
  currencyId          String               @map("currency_id") @db.VarChar(8)
  type                String               @db.VarChar(32)
  group               String               @db.VarChar(16)
  bond                Bond?
  portfolioGroupItems PortfolioGroupItem[] @relation("portfolio_group_itemTosecurity")
  trades              Trade[]              @relation("securityTotrade")

  @@map("security")
}

model Bond {
  securityCode    String   @id @map("security_code") @db.VarChar(16)
  bondType        String?  @map("bond_type") @db.VarChar(64)
  faceValue       Decimal  @map("face_value") @db.Decimal(12, 4)
  accruedInterest Decimal  @map("accrued_interest") @db.Decimal(12, 4)
  matDate         DateTime @map("mat_date") @db.Date
  bondization     Decimal  @db.Decimal(12, 4)
  security        Security @relation(fields: [securityCode], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "security_code")

  @@index([matDate], map: "mat_date_index")
  @@map("bond")
}

model Trade {
  id              Int       @id @default(autoincrement())
  portfolioCode   String    @map("portfolio_code") @db.VarChar(32)
  type            String    @db.VarChar(16)
  count           Int
  price           Decimal   @db.Decimal(12, 4)
  total           Decimal   @db.Decimal(12, 4)
  tradeDate       DateTime  @map("trade_date") @db.Timestamp(6)
  securityCode    String    @map("security_code") @db.VarChar(16)
  countMultiplier Decimal   @default(1) @map("count_multiplier") @db.Decimal(12, 4)
  portfolio       Portfolio @relation("portfolioTotrade", fields: [portfolioCode], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "portfolio")
  security        Security  @relation("securityTotrade", fields: [securityCode], references: [code], onUpdate: Restrict, map: "security_code")

  @@index([portfolioCode], map: "portfolio_code_index")
  @@index([securityCode], map: "security_code_index")
  @@index([tradeDate], map: "trade_date_index")
  @@index([type], map: "type_index")
  @@map("trade")
}

model Currency {
  currencyId    String    @map("currency_id") @db.VarChar(16)
  name          String    @db.VarChar(64)
  amount        Decimal   @db.Decimal(16, 4)
  portfolioCode String    @map("portfolio_code") @db.VarChar(32)
  portfolio     Portfolio @relation("currencyToportfolio", fields: [portfolioCode], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "portfolio_code")

  @@id([currencyId, portfolioCode])
  @@map("currency")
}

model PortfolioGroup {
  portfolioCode String               @map("portfolio_code") @db.VarChar(32)
  groupName     String               @map("group_name") @db.VarChar(128)
  id            Int                  @id @default(autoincrement())
  parentId      Int?                 @map("parent_id")
  targetPercent Decimal              @map("target_percent") @db.Decimal(7, 4)
  parent        PortfolioGroup?      @relation("portfolio_groupToportfolio_group_parent_id", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "parent_id")
  portfolio     Portfolio            @relation("portfolioToportfolio_group", fields: [portfolioCode], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "portfolio_code")
  children      PortfolioGroup[]     @relation("portfolio_groupToportfolio_group_parent_id")
  items         PortfolioGroupItem[]

  @@map("portfolio_group")
}

model PortfolioGroupItem {
  portfolioGroupId Int            @map("portfolio_group_id")
  securityCode     String         @map("security_code") @db.VarChar(16)
  portfolioGroup   PortfolioGroup @relation(fields: [portfolioGroupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "portfolio_group_id")
  security         Security       @relation("portfolio_group_itemTosecurity", fields: [securityCode], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "security_code")

  @@id([portfolioGroupId, securityCode])
  @@map("portfolio_group_item")
}
